sql = checkQuery(), errorReportFile = "")
DT::datatable(data, options = list(scrollX = TRUE))
})
# Update table with result
output$table <- shiny::isolate(DT::renderDataTable({
getData()}))
# Autocompletion stuff
comps <- shiny::reactive({
comps <- list()
temp <- getSchema()
comps <- c(comps, list(Eunomia = temp))
# print(comps)
comps <- c(comps, sapply(temp, getCols, connection))
# print(comps)
})
# Setup Ace
output$ace_editor <- shiny::renderUI({
shinyAce::aceEditor(
"editor",
mode = "sql",
value = "SELECT * FROM person",
autoComplete = "live",
autoCompleters = "static",
autoCompleteList = shiny::isolate(comps()))
})
}
shiny::shinyApp(server = server, ui = ui)
#' getCols
#'
#' @param table table name in database
#' @param connection connection object
#'
#' @import DatabaseConnector glue
getCols <- function(table, connection) {
tolower(DatabaseConnector::renderTranslateQuerySql(
connection,
glue::glue("PRAGMA table_info(", table, ")"))$NAME)
}
#' connectToDb
#'
#' @return DatabaseConnector connection object
#'
#' @import Eunomia DatabaseConnector
connectToDb <- function() {
# Database Connection
connectionDetails <- Eunomia::getEunomiaConnectionDetails()
connection <- DatabaseConnector::connect(connectionDetails)
return(connection)
}
shiny::shinyApp(server = server, ui = ui)
system.file("inst", package = "dummyPack")
system.file("inst", "EunomiaFiddle", package = "dummyPack")
system.file(package = "dummyPack")
system.file("EunomiaFiddle", package = "dummyPack")
shiny::shinyApp("system.file("EunomiaFiddle", package = "dummyPack")")
shiny::shinyApp(system.file("EunomiaFiddle", package = "dummyPack"))
shiny::shinyAppDir(system.file("EunomiaFiddle", package = "dummyPack"))
getwd()
cd
getwd()
setwd("../R")
setwd("inst/")
getwd()
setwd("../R")
getwd()
setwd("../inst/")
source("../R/runFiddle.R")
use_readme_md(open = rlang::is_interactive())
usethis::use_readme_md(open = rlang::is_interactive())
usethis::use_readme_md(open = rlang::is_interactive())
roxygen2::roxygenise()
system.file("cdmFiddle", package = "cdmFiddle")
system.file("cdmFiddle")
system.file(package = "cdmFiddle")
getwd()
runFiddle <- function(server, ui) {
print(getwd())
appDir <- system.file("shinyApp", package = "cdmFiddle")
shiny::shinyAppDir(appDir)
}
runFiddle()
usethis::use_test("runFiddle")
library(cdmFiddle)
test_that("multiplication works", {
library(cdmFiddle)
runFiddle()
expect_equal(2 * 2, 4)
})
library(testthat)
test_that("multiplication works", {
library(cdmFiddle)
runFiddle()
expect_equal(2 * 2, 4)
})
test_that("multiplication works", {
library(cdmFiddle)
runFiddle()
})
test_that("multiplication works", {
library(cdmFiddle)
runFiddle()
})
here::here()
here::here("R")
here::here("shinyApp")
here::here("shinyApp")
#appDir <- here::here("shinyApp")
print(here::here())
install.packages("ggplot2", lib="C:/R/R-4.2.1/library")
.Library.site
.Library.site()
install.packages("switchr")
switchrBaseDir(file.path(tempdir(), ".switchr"))
library(switchr)
switchrBaseDir(file.path(tempdir(), ".switchr"))
reps = options("repos")[[1]]
options(width=40)
if(reps["CRAN"] == "@CRAN@") {
+ reps["CRAN"] = "https://cloud.r-project.org"
+ options(repos = reps)
+ }
if(reps["CRAN"] == "@CRAN@") {
reps["CRAN"] = "https://cloud.r-project.org"
options(repos = reps)
}
graceful_inet(TRUE)
switchTo("vign1")
switchBack()
switchTo("Test")
switchBack()
removeLib("vign1")
removeLib("Test")
?swtichTo
??swtichTo
switchTo("Test")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::install_local("D:\Users\mvankessel\Documents\cdmFiddle_0.1.0.tar.gz")
devtools::install_local("D:\Users\mvankessel\Documents\cdmFiddle_0.1.0.tar.gz")
"D:\Users\mvankessel\Documents\cdmFiddle_0.1.0.tar.gz"
normalizePath("D:\Users\mvankessel\Documents\cdmFiddle_0.1.0.tar.gz")
getwd()
switchBack()
DependencyReviewer::checkDependencies()
devtools::install_local("D:/Users/mvankessel/Documents/R-Packages/cdmFiddle_0.1.0.tar.gz", force = TRUE)
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::install_local("D:/Users/mvankessel/Documents/R-Packages/cdmFiddle_0.1.0.tar.gz", force = TRUE)
devtools::install_local("D:/Users/mvankessel/Documents/R-Packages/cdmFiddle_0.1.0.tar.gz", force = TRUE)
cdmFiddle::connectToDb()
roxygen2::roxygenise()
devtools::install_local("D:/Users/mvankessel/Documents/R-Packages/cdmFiddle_0.1.0.tar.gz", force = TRUE)
devtools::install_local("D:/Users/mvankessel/Documents/R-Packages/cdmFiddle_0.1.0.tar.gz", force = TRUE)
cdmFiddle::connectToDb()
cdmFiddle::connectToDb(Eunomia::getEunomiaConnectionDetails())
cdmFiddle::runFiddle()
#' connectToDb
#'
#' @return DatabaseConnector connection object
#'
#' @import Eunomia DatabaseConnector
#' @export
connectToDb <- function(connectionDetails) {
# Database Connection
#connectionDetails <- Eunomia::getEunomiaConnectionDetails()
connection <- DatabaseConnector::connect(connectionDetails)
return(connection)
}
connectToDb(Eunomia::getEunomiaConnectionDetails())
runFiddle <- function() {
appDir <- system.file(package = "cdmFiddle", "shinyApp")
if (appDir == "") {
stop("Could not find shiny application")
} else {
shiny::shinyAppDir(appDir)
}
}
runFiddle()
#' connectToDb
#'
#' @return DatabaseConnector connection object
#'
#' @import Eunomia DatabaseConnector
#' @export
connectToDb <- function(connectionDetails) {
# Database Connection
#connectionDetails <- Eunomia::getEunomiaConnectionDetails()
.GlobalEnv(connection) <- DatabaseConnector::connect(connectionDetails)
return(connection)
}
DatabaseConnector::disconnect(connection)
#' connectToDb
#'
#' @return DatabaseConnector connection object
#'
#' @import Eunomia DatabaseConnector
#' @export
connectToDb <- function(connectionDetails) {
# Database Connection
#connectionDetails <- Eunomia::getEunomiaConnectionDetails()
.GlobalEnv(connection) <- DatabaseConnector::connect(connectionDetails)
return(connection)
}
connectToDb(Eunomia::getEunomiaConnectionDetails())
#' connectToDb
#'
#' @return DatabaseConnector connection object
#'
#' @import Eunomia DatabaseConnector
#' @export
connectToDb <- function(connectionDetails) {
# Database Connection
#connectionDetails <- Eunomia::getEunomiaConnectionDetails()
connection <<- DatabaseConnector::connect(connectionDetails)
return(connection)
}
connectToDb(Eunomia::getEunomiaConnectionDetails())
runFiddle()
Sys.setenv("shiny")
rm(list = ls())
#' connectToDb
#'
#' @return DatabaseConnector connection object
#'
#' @import Eunomia DatabaseConnector
#' @export
connectToDb <- function(connectionDetails) {
# Database Connection
#connectionDetails <- Eunomia::getEunomiaConnectionDetails()
connection <- DatabaseConnector::connect(connectionDetails)
return(connection)
}
connectToDb(Eunomia::getEunomiaConnectionDetails())
Sys.getenv(connection)
??Sys.getenv
Sys.getenv("connection")
Sys.getenv()
e <- new.env()
e
#' connectToDb
#'
#' @return DatabaseConnector connection object
#'
#' @import Eunomia DatabaseConnector
#' @export
connectToDb <- function(connectionDetails) {
# Database Connection
#connectionDetails <- Eunomia::getEunomiaConnectionDetails()
e <- new.env()
e$connection <- DatabaseConnector::connect(connectionDetails)
return(connection)
}
rm(list = ls())
connectToDb(Eunomia::getEunomiaConnectionDetails())
#' connectToDb
#'
#' @return DatabaseConnector connection object
#'
#' @import Eunomia DatabaseConnector
#' @export
connectToDb <- function(connectionDetails) {
# Database Connection
#connectionDetails <- Eunomia::getEunomiaConnectionDetails()
e <- new.env()
e$connection <- DatabaseConnector::connect(connectionDetails)
return(connection)
}
connectToDb(Eunomia::getEunomiaConnectionDetails())
runFiddle <- function() {
appDir <- system.file(package = "cdmFiddle", "shinyApp")
if (appDir == "") {
stop("Could not find shiny application")
} else {
shiny::shinyAppDir(appDir)
}
}
runFiddle()
e
#' connectToDb
#'
#' @return DatabaseConnector connection object
#'
#' @import Eunomia DatabaseConnector
#' @export
connectToDb <- function(connectionDetails) {
# Database Connection
#connectionDetails <- Eunomia::getEunomiaConnectionDetails()
e <<- new.env()
e$connection <- DatabaseConnector::connect(connectionDetails)
return(connection)
}
runFiddle <- function() {
appDir <- system.file(package = "cdmFiddle", "shinyApp")
if (appDir == "") {
stop("Could not find shiny application")
} else {
shiny::shinyAppDir(appDir)
}
}
connectToDb(Eunomia::getEunomiaConnectionDetails())
#' connectToDb
#'
#' @return DatabaseConnector connection object
#'
#' @import Eunomia DatabaseConnector
#' @export
connectToDb <- function(connectionDetails) {
# Database Connection
#connectionDetails <- Eunomia::getEunomiaConnectionDetails()
e <<- new.env()
e$connection <- DatabaseConnector::connect(connectionDetails)
# return(connection)
}
connectToDb(Eunomia::getEunomiaConnectionDetails())
runFiddle()
e$connection
server <- function(input, output, session) {
#connection <- connectToDb()
message("Connected to Eunomia SQLite database")
# Get schema of Eunomia
getSchema <- shiny::reactive({
schemaData <- DatabaseConnector::renderTranslateQuerySql(
e$connection,
"SELECT lower(name) schema FROM sqlite_schema WHERE type='table' ORDER BY name;")
return(schemaData$SCHEMA)
})
# Check SQL input
checkQuery <- shiny::reactive({
if(!endsWith(input$editor, ";")) {
sql <- glue::glue(input$editor, ";")
} else {
sql <- input$editor
}
})
# Get data
getData <- shiny::eventReactive(input$query, {
data <- DatabaseConnector::renderTranslateQuerySql(
connection = e$connection,
sql = checkQuery(), errorReportFile = "")
DT::datatable(data, options = list(scrollX = TRUE))
})
# Update table with result
output$table <- shiny::isolate(DT::renderDataTable({
getData()}))
# Autocompletion stuff
comps <- shiny::reactive({
comps <- list()
temp <- getSchema()
comps <- c(comps, list(Eunomia = temp))
# print(comps)
comps <- c(comps, sapply(temp, getCols, e$connection))
# print(comps)
})
# Setup Ace
output$ace_editor <- shiny::renderUI({
shinyAce::aceEditor(
"editor",
mode = "sql",
value = "SELECT * FROM person",
autoComplete = "live",
autoCompleters = "static",
autoCompleteList = shiny::isolate(comps()))
})
on.exit({
rm(e)
})
}
runFiddle <- function() {
appDir <- system.file(package = "cdmFiddle", "shinyApp")
if (appDir == "") {
stop("Could not find shiny application")
} else {
shiny::shinyAppDir(appDir)
}
}
runFiddle
runFiddle()
runApp('inst/shinyApp')
devtools::install_local("D:/Users/mvankessel/Documents/R-Packages/cdmFiddle_0.1.0.tar.gz")
devtools::install_local("D:/Users/mvankessel/Documents/R-Packages/cdmFiddle_0.1.0.tar.gz")
cdmFiddle::connectToDb(Eunomia::getEunomiaConnectionDetails())
cdmFiddle::runFiddle()
rm(list = ls())
cdmFiddle::connectToDb(Eunomia::getEunomiaConnectionDetails())
devtools::install_local("D:/Users/mvankessel/Documents/R-Packages/cdmFiddle_0.1.0.tar.gz")
cdmFiddle::runFiddle()
cdmFiddle::runFiddle()
devtools::install_local("D:/Users/mvankessel/Documents/R-Packages/cdmFiddle_0.1.0.tar.gz")
cdmFiddle::runFiddle()
cdmFiddle::connectToDb(Eunomia::getEunomiaConnectionDetails())
devtools::install_local("D:/Users/mvankessel/Documents/R-Packages/cdmFiddle_0.1.0.tar.gz")
cdmFiddle::connectToDb(Eunomia::getEunomiaConnectionDetails())
cdmFiddle::runFiddle()
rm(list = ls())
cdmFiddle::connectToDb(Eunomia::getEunomiaConnectionDetails())
cdmFiddle::runFiddle()
rm(list = ls())
devtools::install_local("D:/Users/mvankessel/Documents/R-Packages/cdmFiddle_0.1.0.tar.gz")
cdmFiddle::connectToDb(Eunomia::getEunomiaConnectionDetails())
cdmFiddle::runFiddle()
devtools::install_local("D:/Users/mvankessel/Documents/R-Packages/cdmFiddle_0.1.0.tar.gz")
cdmFiddle::connectToDb(Eunomia::getEunomiaConnectionDetails())
cdmFiddle::runFiddle()
environment(e, get)
environment(e)
e
e$connection
get(e$connection)
search()
ls(e)
get(e, "connection")
get(e, envir = "connection")
get("connection", envir = e)
e$connection
devtools::install_local("D:/Users/mvankessel/Documents/R-Packages/cdmFiddle_0.1.0.tar.gz")
cdmFiddle::connectToDb(Eunomia::getEunomiaConnectionDetails())
cdmFiddle::runFiddle()
devtools::install_local("D:/Users/mvankessel/Documents/R-Packages/cdmFiddle_0.1.0.tar.gz")
cdmFiddle::connectToDb(Eunomia::getEunomiaConnectionDetails())
cdmFiddle::runFiddle()
devtools::install_local("D:/Users/mvankessel/Documents/R-Packages/cdmFiddle_0.1.0.tar.gz")
cdmFiddle::runFiddle()
cdmFiddle::connectToDb(Eunomia::getEunomiaConnectionDetails())
cdmFiddle::runFiddle()
rm(list = ls())
cdmFiddle::connectToDb(Eunomia::getEunomiaConnectionDetails())
cdmFiddle::runFiddle()
cdmFiddle::runFiddle()
devtools::install_local("D:/Users/mvankessel/Documents/R-Packages/cdmFiddle_0.1.0.tar.gz")
rm(list = ls())
cdmFiddle::connectToDb(Eunomia::getEunomiaConnectionDetails())
cdmFiddle::runFiddle()
rm(list = ls())
library(cdmFiddle)
cdmFiddle::connectToDb(Eunomia::getEunomiaConnectionDetails())
cdmFiddle::runFiddle()
cdmFiddle::runFiddle()
cdmFiddle::connectToDb(Eunomia::getEunomiaConnectionDetails())
cdmFiddle::runFiddle()
library(cdmFiddle)
cdmFiddle::connectToDb(Eunomia::getEunomiaConnectionDetails())
cdmFiddle::runFiddle()
getCols
rm(list = ls())
library(cdmFiddle)
cdmFiddle::connectToDb(Eunomia::getEunomiaConnectionDetails())
cdmFiddle::runFiddle()
rm(e)
e <- new.env()
rm(c(e, getCols))
rm(c("e", "getCols"))
rm(list = c("e", "getCols"))
library(cdmFiddle)
cdmFiddle::connectToDb(Eunomia::getEunomiaConnectionDetails())
cdmFiddle::runFiddle()
search()
package:cdmFiddle$t <- 3
as.environment("package:cdmFiddle")
as.environment("package:cdmFiddle")$t <- 3
assign(x = t, value = 3, envir = as.environment("package:cdmFiddle"))
assign(x = "t", value = 3, envir = as.environment("package:cdmFiddle"))
.GlobalEnv
library(cdmFiddle)
cdmFiddle::connectToDb(Eunomia::getEunomiaConnectionDetails())
cdmFiddle::runFiddle()
rm(list = ls())
library(cdmFiddle)
cdmFiddle::connectToDb(Eunomia::getEunomiaConnectionDetails())
library(cdmFiddle)
cdmFiddle::connectToDb(Eunomia::getEunomiaConnectionDetails())
library(cdmFiddle)
cdmFiddle::runFiddle()
rm("e")
rm(list = ls())
library(cdmFiddle)
cdmFiddle::connectToDb(Eunomia::getEunomiaConnectionDetails())
cdmFiddle::runFiddle()
rm(list = ls())
library(cdmFiddle)
cdmFiddle::connectToDb(Eunomia::getEunomiaConnectionDetails())
cdmFiddle::runFiddle()
library(cdmFiddle)
cdmFiddle::connectToDb(Eunomia::getEunomiaConnectionDetails())
cdmFiddle::runFiddle()
conDetails <- DatabaseConnector::createConnectionDetails(
extraSettings = Sys.getenv("SYNTH_NAME"),
dbms = Sys.getenv("SYNTH_DBMS"),
user = Sys.getenv("SYNTH_USER"),
password = Sys.getenv("SYNTH_PASS"),
server = Sys.getenv("SYNTH_SERVER"),
port = Sys.getenv("SYNTH_PORT"),
pathToDriver = Sys.getenv("JDBC_DRIVER"))
conDetails
cdmFiddle::connectToDb(conDetails)
cdmFiddle::runFiddle()
conDetails$user()
library(cdmFiddle)
cdmFiddle::connectToDb(conDetails)
cdmFiddle::runFiddle()
library(cdmFiddle)
cdmFiddle::connectToDb(conDetails)
cdmFiddle::runFiddle()
library(cdmFiddle)
cdmFiddle::connectToDb()
cdmFiddle::runFiddle()
library(cdmFiddle)
roxygen2::roxygenise()
library(cdmFiddle)
cdmFiddle::runFiddle()
